buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }

    dependencies {
        classpath 'org.jooq:jooq-codegen:3.11.11'
        classpath 'org.jooq:jooq-meta-extensions:3.11.11'
        classpath 'com.h2database:h2:1.4.199'
    }
}

plugins {
    id "org.jetbrains.kotlin.jvm" version "1.3.50"
    id "org.jetbrains.kotlin.kapt" version "1.3.50"
    id "org.jetbrains.kotlin.plugin.allopen" version "1.3.50"
    id "com.github.johnrengelman.shadow" version "5.0.0"
    id "application"
}

version "0.1"
group "revolut.task"

repositories {
    mavenCentral()
    maven { url "https://jcenter.bintray.com" }
}

configurations {
    // for dependencies that are needed for development only
    developmentOnly 
}

dependencies {
    implementation platform("io.micronaut:micronaut-bom:$micronautVersion")
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}"
    implementation "org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}"
    implementation "io.micronaut:micronaut-runtime"
    implementation "io.micronaut:micronaut-http-server-netty"
    implementation "io.micronaut:micronaut-http-client"
    kapt platform("io.micronaut:micronaut-bom:$micronautVersion")
    kapt "io.micronaut:micronaut-inject-java"
    kapt "io.micronaut:micronaut-validation"
    runtimeOnly "com.fasterxml.jackson.module:jackson-module-kotlin:2.9.8"
    runtimeOnly "ch.qos.logback:logback-classic:1.2.3"
    compile "io.micronaut.configuration:micronaut-jooq"
    runtime "io.micronaut.configuration:micronaut-jdbc-hikari"
    runtime "com.h2database:h2:1.4.199"
    compile "org.mapstruct:mapstruct:1.3.1.Final"
    kapt "org.mapstruct:mapstruct-processor:1.3.1.Final"

    kaptTest platform("io.micronaut:micronaut-bom:$micronautVersion")
    kaptTest "io.micronaut:micronaut-inject-java"
    testAnnotationProcessor "io.micronaut:micronaut-inject-java"
    testImplementation platform("io.micronaut:micronaut-bom:$micronautVersion")
    testImplementation "org.junit.jupiter:junit-jupiter-api"
    testImplementation "io.micronaut.test:micronaut-test-junit5"
    testImplementation "io.micronaut:micronaut-inject-java"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"
}

test.classpath += configurations.developmentOnly

mainClassName = "revolut.task.Application"

test {
    useJUnitPlatform()
}

allOpen {
	annotation("io.micronaut.aop.Around")
}

compileKotlin {
	kotlinOptions {
	    jvmTarget = '1.8' 
	    //Will retain parameter names for Java reflection
	    javaParameters = true
    }
}

compileTestKotlin {
	kotlinOptions {
	    jvmTarget = '1.8' 
	    javaParameters = true
    }
}

shadowJar {
    mergeServiceFiles()
}

run.classpath += configurations.developmentOnly
run.jvmArgs('-noverify', '-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')

task generateJooqSources {
    doLast {
        def writer = new StringWriter()
        def xml = new groovy.xml.MarkupBuilder(writer)
                .configuration('xmlns': 'http://www.jooq.org/xsd/jooq-codegen-3.11.0.xsd') {
                    jdbc() {
                        driver('org.h2.Driver')
                        url('jdbc:h2:~/test-gradle')
                        user('sa')
                        password('')
                    }
                    generator() {
                        database() {
                            delegate.invokeMethod("name", ["org.jooq.meta.extensions.ddl.DDLDatabase"])
                            properties {
                                delegate.invokeMethod("property", [{
                                    delegate.invokeMethod("key", ["scripts"])
                                    delegate.invokeMethod("value", ["src/main/resources/db_init.sql"])
                                }])
                            }
                        }

                        // Watch out for this caveat when using MarkupBuilder with "reserved names"
                        // - https://github.com/jOOQ/jOOQ/issues/4797
                        // - http://stackoverflow.com/a/11389034/521799
                        // - https://groups.google.com/forum/#!topic/jooq-user/wi4S9rRxk4A
                        generate([:]) {
                            pojos true
                            daos true
                        }
                        target() {
                            packageName('revolut.task.db')
                            directory('src/main/java')
                        }
                    }
                }
        org.jooq.codegen.GenerationTool.generate(writer.toString())
    }
}